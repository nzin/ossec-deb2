Description: Add chroot option
 This patch introduces two new options to all of OSSEC programs.
 The option '-C' enables chroot (default in OSSEC upstream) of the
 program and the option '-N' disables use of chroot. When the latter
 option is used the program will just change its main directory
 to OSSEC's directory instead.
 .
 This makes it possible to provide a package in Debian without the
 chrooting enabled (which is disabled in another separate patch to
 make it possible to integrate this upstream).
 . 
 For the patch to work some of the programs have been modified
 to make use of the getop() functionality. Previously, some programs
 parsed command line arguments 'by hand'.
 . 
 The person named in the Author field signed this changelog entry.
Author: Javier Fernandez-Sanguino <jfs@debian.org>
Origin: debian
Forwarded: not-yet
Reviewed-By: 
Last-Update: 2012-08-26


--- a/src/os_auth/main-server.c
+++ b/src/os_auth/main-server.c
@@ -53,6 +53,7 @@
     // Count of pids we are wait()ing on.
     int c = 0, test_config = 0, use_ip_address = 0, pid = 0, status, i = 0, active_processes = 0;
     int gid = 0, client_sock = 0, sock = 0, port = 1515, ret = 0;
+    int do_chroot = 1;
     char *dir  = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -76,7 +77,7 @@
     OS_SetName(ARGV0);
     /* add an option to use the ip on the socket to tie the name to a
        specific address */
-    while((c = getopt(argc, argv, "Vdhiu:g:D:c:m:p:")) != -1)
+    while((c = getopt(argc, argv, "Vdhiu:g:D:c:m:p:NC:")) != -1)
     {
         switch(c){
             case 'V':
@@ -123,6 +124,12 @@
                     ErrorExit("%s: Invalid port: %s", ARGV0, optarg);
                 }
                 break;
+            case 'N': /* Disable the use of chroot */
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 report_help();
                 break;
@@ -152,8 +159,13 @@
 
     /* chrooting -- TODO: this isn't a chroot. Should also close
        unneeded open file descriptors (like stdin/stdout)*/
-    chdir(dir);
-
+    if (do_chroot)
+      chdir(dir);
+    else
+      chdir(dir);
+    /* Note: there is no difference with chrooting or not in the main-server as
+     * upstream does not yet make one, the code is there to make it possible if
+     * upstream changes the behaviour */
 
 
     /* Signal manipulation */
--- a/src/os_csyslogd/main.c
+++ b/src/os_csyslogd/main.c
@@ -21,6 +21,7 @@
 int main(int argc, char **argv)
 {
     int c, test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     int uid = 0,gid = 0;
 
     /* Using MAILUSER (read only) */
@@ -38,7 +39,7 @@
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:NC")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -78,6 +79,12 @@
             case 't':
                 test_config = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
--- a/src/shared/help.c
+++ b/src/shared/help.c
@@ -35,7 +35,9 @@
     print_out("    -u <user>   Run as 'user'");
     print_out("    -g <group>  Run as 'group'");
     print_out("    -c <config> Read the 'config' file");
-    print_out("    -D <dir>    Chroot to 'dir'");
+    print_out("    -D <dir>    Chroot or change working directory to 'dir'");
+    print_out("    -N          Do not chroot");
+    print_out("    -C          Chroot the program (default behaviour)");
     print_out(" ");
     exit(1);
 }
--- a/src/analysisd/analysisd.c
+++ b/src/analysisd/analysisd.c
@@ -133,6 +133,7 @@
 #endif
 {
     int c = 0, m_queue = 0, test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     char *dir = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -152,7 +153,7 @@
     hourly_syscheck = 0;
     hourly_firewall = 0;
 
-    while((c = getopt(argc, argv, "Vtdhfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vtdhfu:g:D:c:NC")) != -1){
         switch(c){
 	    case 'V':
 		print_version();
@@ -189,6 +190,12 @@
             case 't':
                 test_config = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
--- a/src/analysisd/makelists.c
+++ b/src/analysisd/makelists.c
@@ -67,7 +67,9 @@
     print_out("    -u <user>   Run as 'user'");
     print_out("    -g <group>  Run as 'group'");
     print_out("    -c <config> Read the 'config' file");
-    print_out("    -D <dir>    Chroot to 'dir'");
+    print_out("    -D <dir>    Chroot or change working directory to 'dir'");
+    print_out("    -N          Do not chroot");
+    print_out("    -C          Chroot the daemon (default behaviour)");
     print_out(" ");
     exit(1);
 }
@@ -77,6 +79,7 @@
 int main(int argc, char **argv)
 {
     int c = 0;
+    int do_chroot = 1;
     char *dir = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -93,7 +96,7 @@
     prev_year = 0;
     memset(prev_month, '\0', 4);
 
-    while((c = getopt(argc, argv, "Vdhfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vdhfu:g:D:c:NC")) != -1){
         switch(c){
 	    case 'V':
 		print_version();
@@ -126,6 +129,12 @@
             case 'f':
                 force = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
--- a/src/os_maild/maild.c
+++ b/src/os_maild/maild.c
@@ -31,6 +31,7 @@
 int main(int argc, char **argv)
 {
     int c, test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     int uid = 0,gid = 0;
     char *dir  = DEFAULTDIR;
     char *user = MAILUSER;
@@ -45,7 +46,7 @@
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:NC")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -82,6 +83,12 @@
             case 't':
                 test_config = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -144,11 +151,13 @@
 
 
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
 
     /* Changing user */
--- a/src/addagent/main.c
+++ b/src/addagent/main.c
@@ -71,6 +71,7 @@
     char *user_msg;
 
     int c = 0, cmdlist = 0;
+    int do_chroot = 1;
     char *cmdexport = NULL;
     char *cmdimport = NULL;
     char *cmdbulk = NULL;
@@ -86,7 +87,7 @@
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "Vhle:i:f:")) != -1){
+    while((c = getopt(argc, argv, "Vhle:i:f:NC:")) != -1){
         switch(c){
 	        case 'V':
 		        print_version();
@@ -125,6 +126,12 @@
             case 'l':
                 cmdlist = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
@@ -156,16 +163,18 @@
 
 
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
 
 
-    /* Inside chroot now */
-    nowChroot();
-
-
     /* Starting signal handler */
     StartSIG2(ARGV0, manage_shutdown);
     #endif
--- a/src/monitord/main.c
+++ b/src/monitord/main.c
@@ -20,6 +20,7 @@
 int main(int argc, char **argv)
 {
     int c, test_config = 0, run_foreground = 0;
+    int do_chroot = 1;
     int uid=0,gid=0;
     char *dir  = DEFAULTDIR;
     char *user = USER;
@@ -33,7 +34,7 @@
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:NC")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -70,6 +71,12 @@
             case 't':
                 test_config = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -171,11 +178,13 @@
 
 
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
 
     /* Changing user */
--- a/src/monitord/report.c
+++ b/src/monitord/report.c
@@ -25,6 +25,8 @@
     printf("\t-r <filter> <value> Show related entries.\n");
     printf("\t-n                  Creates a description for the report.\n");
     printf("\t-s                  Show the alert dump.\n");
+    printf("\t-N                  Do not chroot.\n");
+    printf("\t-C                  Chroot the program (default behaviour).\n");
     printf("\n");
     printf("\tFilters allowed: group, rule, level, location,\n");
     printf("\t                 user, srcip, filename\n");
@@ -42,6 +44,7 @@
 {
     int c, test_config = 0;
     int uid=0,gid=0;
+    int do_chroot = 1;
     char *dir  = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -77,7 +80,7 @@
 
     r_filter.report_name = NULL;
 
-    while((c = getopt(argc, argv, "Vdhstu:g:D:c:f:v:n:r:")) != -1)
+    while((c = getopt(argc, argv, "Vdhstu:g:D:c:f:v:n:r:NC")) != -1)
     {
         switch(c){
             case 'V':
@@ -146,6 +149,12 @@
             case 's':
                 r_filter.show_alerts = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 report_help();
                 break;
@@ -175,11 +184,13 @@
 
 
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else { 
+	    chdir(dir);
+    }
 
 
     /* Changing user */
--- a/src/os_dbd/main.c
+++ b/src/os_dbd/main.c
@@ -56,6 +56,7 @@
 {
     int c, test_config = 0, run_foreground = 0;
     int uid = 0,gid = 0;
+    int do_chroot = 1;
 
     /* Using MAILUSER (read only) */
     char *dir  = DEFAULTDIR;
@@ -73,7 +74,7 @@
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:NC")) != -1){
         switch(c){
             case 'V':
                 db_info();
@@ -113,6 +114,12 @@
             case 't':
                 test_config = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -217,12 +224,14 @@
 
 
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-
-    /* Now on chroot */
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    /* Now on chroot */
+	    nowChroot();
+    } else { 
+	    chdir(dir);
+    }
 
 
     /* Inserting server info into the db */
--- a/src/remoted/main.c
+++ b/src/remoted/main.c
@@ -68,6 +68,17 @@
                 if(!optarg)
                     ErrorExit("%s: -D needs an argument",ARGV0);
                 dir = optarg;
+                break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
+            default:
+		print_out("Unknown argument");
+                help(ARGV0);
+                break;
         }
     }
 
@@ -114,11 +125,13 @@
             ErrorExit(SETGID_ERROR, ARGV0, group);
 
     /* Going on chroot */
-    if(Privsep_Chroot(dir) < 0)
-                ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
 
     /* Starting the signal manipulation */
--- a/src/util/agent_control.c
+++ b/src/util/agent_control.c
@@ -35,6 +35,8 @@
     printf("\t-f <ar>     Used with -b, specifies which response to run.\n");
     printf("\t-L          List available active responses.\n");
     printf("\t-s          Changes the output to CSV (comma delimited).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -55,6 +57,7 @@
     int c = 0, restart_syscheck = 0, restart_all_agents = 0, list_agents = 0;
     int info_agent = 0, agt_id = 0, active_only = 0, csv_output = 0;
     int list_responses = 0, end_time = 0, restart_agent = 0;
+    int do_chroot = 1;
 
     char shost[512];
 
@@ -73,7 +76,7 @@
     }
 
 
-    while((c = getopt(argc, argv, "VehdlLcsaru:i:b:f:R:")) != -1)
+    while((c = getopt(argc, argv, "VehdlLcsaru:i:b:f:R:NC")) != -1)
     {
         switch(c){
             case 'V':
@@ -140,6 +143,12 @@
             case 'a':
                 restart_all_agents = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
--- a/src/util/rootcheck_control.c
+++ b/src/util/rootcheck_control.c
@@ -35,6 +35,8 @@
     printf("\t-q          Used with -i, prints all the outstanding issues.\n");
     printf("\t-L          Used with -i, prints the last scan.\n");
     printf("\t-s          Changes the output to CSV (comma delimited).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -49,6 +51,7 @@
 
     int gid = 0;
     int uid = 0;
+    int do_chroot = 1;
     int c = 0, info_agent = 0, update_rootcheck = 0,
                list_agents = 0, show_last = 0,
                resolved_only = 0;
@@ -69,7 +72,7 @@
     }
 
 
-    while((c = getopt(argc, argv, "VhqrDdLlcsu:i:")) != -1)
+    while((c = getopt(argc, argv, "VhqrDdLlcsu:i:NC")) != -1)
     {
         switch(c){
             case 'V':
@@ -117,6 +120,12 @@
                 agent_id = optarg;
                 update_rootcheck = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
--- a/src/util/clear_stats.c
+++ b/src/util/clear_stats.c
@@ -28,6 +28,8 @@
     printf("\t-a       Clear all the stats (averages).\n");
     printf("\t-d       Clear the daily averages.\n");
     printf("\t-w       Clear the weekly averages.\n\n");
+    printf("\t-N       Do not chroot.\n");
+    printf("\t-C       Chroot the program (default behaviour).\n");
     exit(1);
 }
 
--- a/src/util/syscheck_update.c
+++ b/src/util/syscheck_update.c
@@ -27,6 +27,8 @@
     printf("\t-l       List available agents.\n");
     printf("\t-a       Update (clear) syscheck database for all agents.\n");
     printf("\t-u <id>  Update (clear) syscheck database for a specific agent.\n");
+    printf("\t-N       Do not chroot.\n");
+    printf("\t-C       Chroot the program (default behaviour).\n");
     printf("\t-u local Update (clear) syscheck database locally.\n\n");
     exit(1);
 }
--- a/src/util/syscheck_control.c
+++ b/src/util/syscheck_control.c
@@ -37,6 +37,8 @@
     printf("\t-z          Used with the -f, zeroes the auto-ignore counter.\n");
     printf("\t-d          Used with the -f, ignores that file.\n");
     printf("\t-s          Changes the output to CSV (comma delimited).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -52,6 +54,7 @@
 
     int gid = 0;
     int uid = 0;
+    int do_chroot = 1;
     int c = 0, info_agent = 0, update_syscheck = 0,
                list_agents = 0, zero_counter = 0,
                registry_only = 0;
@@ -72,7 +75,7 @@
     }
 
 
-    while((c = getopt(argc, argv, "VhzrDdlcsu:i:f:")) != -1)
+    while((c = getopt(argc, argv, "VhzrDdlcsu:i:f:NC")) != -1)
     {
         switch(c){
             case 'V':
@@ -127,6 +130,12 @@
                 agent_id = optarg;
                 update_syscheck = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
--- a/src/client-agent/agentd.c
+++ b/src/client-agent/agentd.c
@@ -25,7 +25,7 @@
 /* AgentdStart v0.2, 2005/11/09
  * Starts the agent daemon.
  */
-void AgentdStart(char *dir, int uid, int gid, char *user, char *group)
+void AgentdStart(char *dir, int uid, int gid, char *user, char *group, int do_chroot)
 {
     int rc = 0;
     int pid = 0;
--- a/src/client-agent/agentd.h
+++ b/src/client-agent/agentd.h
@@ -29,7 +29,7 @@
 int ClientConf(char *cfgfile);
 
 /* Agentd init function */
-void AgentdStart(char *dir, int uid, int gid, char *user, char *group);
+void AgentdStart(char *dir, int uid, int gid, char *user, char *group, int do_chroot);
 
 /* Event Forwarder */
 void *EventForward();
--- a/src/client-agent/main.c
+++ b/src/client-agent/main.c
@@ -78,6 +78,12 @@
                     ErrorExit("%s: -D needs an argument",ARGV0);
                 dir = optarg;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
         }
     }
 
@@ -130,7 +136,7 @@
 
 
     /* Agentd Start */
-    AgentdStart(dir, uid, gid, user, group);
+    AgentdStart(dir, uid, gid, user, group, do_chroot);
 
 
     return(0);
--- a/src/util/list_agents.c
+++ b/src/util/list_agents.c
@@ -26,6 +26,8 @@
     printf("\t-a    List all agents.\n");
     printf("\t-c    List the connected (active) agents.\n");
     printf("\t-n    List the not connected (active) agents.\n");
+    printf("\t-N    Do not chroot.\n");
+    printf("\t-C    Chroot the program (default behaviour).\n");
     exit(1);
 }
 
