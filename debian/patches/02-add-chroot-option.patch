--- a/src/addagent/main.c
+++ b/src/addagent/main.c
@@ -25,6 +25,8 @@
     printf("\t-l          List available agents.\n");
     printf("\t-e <id>     Extracts key for an agent (Manager only).\n");
     printf("\t-i <id>     Import authentication key (Agent only).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     printf("\t-f <file>   Bulk generate client keys from file. (Manager only).\n\n");
     exit(1);
 }
@@ -70,6 +72,7 @@
     char *user_msg;
 
     int c = 0, cmdlist = 0;
+    int do_chroot = 1;
     char *cmdexport = NULL;
     char *cmdimport = NULL;
     char *cmdbulk = NULL;
@@ -85,7 +88,7 @@
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "Vhle:i:f:")) != -1){
+    while((c = getopt(argc, argv, "Vhle:i:f:NC:")) != -1){
         switch(c){
 	        case 'V':
 		        print_version();
@@ -124,6 +127,12 @@
             case 'l':
                 cmdlist = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
@@ -155,16 +164,18 @@
 
 
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
 
 
-    /* Inside chroot now */
-    nowChroot();
-
-
     /* Starting signal handler */
     StartSIG2(ARGV0, manage_shutdown);
     #endif
--- a/src/analysisd/analysisd.c
+++ b/src/analysisd/analysisd.c
@@ -133,6 +133,7 @@
 #endif
 {
     int c = 0, m_queue = 0, test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     char *dir = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -152,7 +153,7 @@
     hourly_syscheck = 0;
     hourly_firewall = 0;
 
-    while((c = getopt(argc, argv, "Vtdhfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vtdhfu:g:D:c:NC:")) != -1){
         switch(c){
 	    case 'V':
 		print_version();
@@ -188,6 +189,12 @@
             case 't':
                 test_config = 1;    
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -281,11 +288,13 @@
         ErrorExit(SETGID_ERROR,ARGV0,group);
 
     /* Chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
     
     
 
--- a/src/analysisd/makelists.c
+++ b/src/analysisd/makelists.c
@@ -67,7 +67,9 @@
     print_out("    -u <user>   Run as 'user'");
     print_out("    -g <group>  Run as 'group'");
     print_out("    -c <config> Read the 'config' file");
-    print_out("    -D <dir>    Chroot to 'dir'");
+    print_out("    -D <dir>    Chroot or change working directory to 'dir'");
+    print_out("    -N          Do not chroot");
+    print_out("    -C          Chroot the daemon (default behaviour)");
     print_out(" ");
     exit(1);
 }
@@ -77,6 +79,7 @@
 int main(int argc, char **argv)
 {
     int c = 0;
+    int do_chroot = 1;
     char *dir = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -93,7 +96,7 @@
     prev_year = 0;
     memset(prev_month, '\0', 4);
 
-    while((c = getopt(argc, argv, "Vdhfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vdhfu:g:D:c:NC:")) != -1){
         switch(c){
 	    case 'V':
 		print_version();
@@ -126,6 +129,12 @@
             case 'f':
                 force = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -158,11 +167,13 @@
         ErrorExit(SETGID_ERROR,ARGV0,group);
 
     /* Chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-    
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
     
 
     /* Createing the lists for use in rules */
--- a/src/client-agent/agentd.c
+++ b/src/client-agent/agentd.c
@@ -25,7 +25,7 @@
 /* AgentdStart v0.2, 2005/11/09
  * Starts the agent daemon.
  */
-void AgentdStart(char *dir, int uid, int gid, char *user, char *group)
+void AgentdStart(char *dir, int uid, int gid, char *user, char *group, int do_chroot)
 {
     int rc = 0;
     int pid = 0;
@@ -49,11 +49,13 @@
 
     
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
-
-    
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
 
     if(Privsep_SetUser(uid) < 0)
--- a/src/client-agent/agentd.h
+++ b/src/client-agent/agentd.h
@@ -29,7 +29,7 @@
 int ClientConf(char *cfgfile);
 
 /* Agentd init function */
-void AgentdStart(char *dir, int uid, int gid, char *user, char *group);
+void AgentdStart(char *dir, int uid, int gid, char *user, char *group, int do_chroot);
 
 /* Event Forwarder */
 void *EventForward();
--- a/src/client-agent/main.c
+++ b/src/client-agent/main.c
@@ -43,13 +43,14 @@
     
     int uid = 0;
     int gid = 0;
+    int do_chroot = 1;
 
     
     /* Setting the name */
     OS_SetName(ARGV0);
 
 
-    while((c = getopt(argc, argv, "Vtdhu:g:D:")) != -1){
+    while((c = getopt(argc, argv, "Vtdhu:g:D:NC:")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -78,6 +79,12 @@
                     ErrorExit("%s: -D needs an argument",ARGV0);
                 dir = optarg;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
         }
     }
 
@@ -130,7 +137,7 @@
 
 
     /* Agentd Start */
-    AgentdStart(dir, uid, gid, user, group);
+    AgentdStart(dir, uid, gid, user, group, do_chroot);
 
     
     return(0);
--- a/src/monitord/main.c
+++ b/src/monitord/main.c
@@ -20,6 +20,7 @@
 int main(int argc, char **argv)
 {
     int c, test_config = 0, run_foreground = 0;
+    int do_chroot = 1;
     int uid=0,gid=0;
     char *dir  = DEFAULTDIR;
     char *user = USER;
@@ -33,7 +34,7 @@
     OS_SetName(ARGV0);
         
 
-    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:NC:")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -69,6 +70,12 @@
             case 't':
                 test_config = 1;    
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -170,11 +177,13 @@
 
     
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
     
     /* Changing user */        
--- a/src/monitord/report.c
+++ b/src/monitord/report.c
@@ -25,6 +25,8 @@
     printf("\t-r <filter> <value> Show related entries.\n");
     printf("\t-n                  Creates a description for the report.\n");
     printf("\t-s                  Show the alert dump.\n");
+    printf("\t-N                  Do not chroot.\n");
+    printf("\t-C                  Chroot the program (default behaviour).\n");
     printf("\n");
     printf("\tFilters allowed: group, rule, level, location,\n");
     printf("\t                 user, srcip, filename\n");
@@ -42,6 +44,7 @@
 {
     int c, test_config = 0;
     int uid=0,gid=0;
+    int do_chroot = 1;
     char *dir  = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -77,7 +80,7 @@
     
     r_filter.report_name = NULL;
 
-    while((c = getopt(argc, argv, "Vdhstu:g:D:c:f:v:n:r:")) != -1)
+    while((c = getopt(argc, argv, "Vdhstu:g:D:c:f:v:n:r:NC:")) != -1)
     {
         switch(c){
             case 'V':
@@ -145,6 +148,12 @@
             case 's':
                 r_filter.show_alerts = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 report_help();
                 break;
@@ -174,11 +183,13 @@
 
     
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else { 
+	    chdir(dir);
+    }
 
     
     /* Changing user */        
--- a/src/os_auth/main-server.c
+++ b/src/os_auth/main-server.c
@@ -53,6 +53,7 @@
     // Count of pids we are wait()ing on.
     int c = 0, test_config = 0, use_ip_address = 0, pid = 0, status, i = 0, active_processes = 0;
     int gid = 0, client_sock = 0, sock = 0, port = 1515, ret = 0;
+    int do_chroot = 1;
     char *dir  = DEFAULTDIR;
     char *user = USER;
     char *group = GROUPGLOBAL;
@@ -76,7 +77,7 @@
     OS_SetName(ARGV0);
     /* add an option to use the ip on the socket to tie the name to a
        specific address */
-    while((c = getopt(argc, argv, "Vdhiu:g:D:c:m:p:")) != -1)
+    while((c = getopt(argc, argv, "Vdhiu:g:D:c:m:p:NC:")) != -1)
     {
         switch(c){
             case 'V':
@@ -122,6 +123,12 @@
                     ErrorExit("%s: Invalid port: %s", ARGV0, optarg);
                 }
                 break;
+            case 'N': /* Disable the use of chroot */
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 report_help();
                 break;
@@ -151,7 +158,13 @@
 
     /* chrooting -- TODO: this isn't a chroot. Should also close
        unneeded open file descriptors (like stdin/stdout)*/
-    chdir(dir);
+    if (do_chroot) 
+	    chdir(dir);
+    else
+	    chdir(dir);
+    /* Note: there is no difference with chrooting or not in the main-server as
+     * upstream does not yet make one, the code is there to make it possible if
+     * upstream changes the behaviour */
 
 
 
--- a/src/os_csyslogd/main.c
+++ b/src/os_csyslogd/main.c
@@ -21,6 +21,7 @@
 int main(int argc, char **argv)
 {
     int c, test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     int uid = 0,gid = 0;
 
     /* Using MAILUSER (read only) */
@@ -38,7 +39,7 @@
     OS_SetName(ARGV0);
         
 
-    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:NC:")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -77,6 +78,12 @@
             case 't':
                 test_config = 1;    
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -147,14 +154,15 @@
     if(Privsep_SetGroup(gid) < 0)
         ErrorExit(SETGID_ERROR,ARGV0,group);
 
-    
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-
-    /* Now on chroot */
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    /* Now on chroot */
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
 
     
--- a/src/os_dbd/main.c
+++ b/src/os_dbd/main.c
@@ -56,6 +56,7 @@
 {
     int c, test_config = 0, run_foreground = 0;
     int uid = 0,gid = 0;
+    int do_chroot = 1;
 
     /* Using MAILUSER (read only) */
     char *dir  = DEFAULTDIR;
@@ -73,7 +74,7 @@
     OS_SetName(ARGV0);
         
 
-    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "vVdhtfu:g:D:c:NC:")) != -1){
         switch(c){
             case 'V':
                 db_info();
@@ -112,6 +113,12 @@
             case 't':
                 test_config = 1;    
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -216,12 +223,14 @@
 
     
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-
-    /* Now on chroot */
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    /* Now on chroot */
+	    nowChroot();
+    } else { 
+	    chdir(dir);
+    }
 
 
     /* Inserting server info into the db */
--- a/src/os_maild/maild.c
+++ b/src/os_maild/maild.c
@@ -31,6 +31,7 @@
 int main(int argc, char **argv)
 {
     int c, test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     int uid = 0,gid = 0;
     char *dir  = DEFAULTDIR;
     char *user = MAILUSER;
@@ -45,7 +46,7 @@
     OS_SetName(ARGV0);
         
 
-    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:")) != -1){
+    while((c = getopt(argc, argv, "Vdhtfu:g:D:c:NC:")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -81,6 +82,12 @@
             case 't':
                 test_config = 1;    
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 help(ARGV0);
                 break;
@@ -143,11 +150,13 @@
 
     
     /* chrooting */
-    if(Privsep_Chroot(dir) < 0)
-        ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-    nowChroot();
-
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
     
     /* Changing user */        
--- a/src/remoted/main.c
+++ b/src/remoted/main.c
@@ -21,6 +21,7 @@
     int i = 0,c = 0;
     int uid = 0, gid = 0;
     int test_config = 0,run_foreground = 0;
+    int do_chroot = 1;
     
     char *cfg = DEFAULTCPATH;
     char *dir = DEFAULTDIR;
@@ -32,7 +33,7 @@
     OS_SetName(ARGV0);
 
     
-    while((c = getopt(argc, argv, "Vdthfu:g:c:D:")) != -1){
+    while((c = getopt(argc, argv, "Vdthfu:g:c:D:NC:")) != -1){
         switch(c){
             case 'V':
                 print_version();
@@ -68,6 +69,17 @@
                 if(!optarg)
                     ErrorExit("%s: -D needs an argument",ARGV0);
                 dir = optarg;
+                break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
+            default:
+		print_out("Unknown argument");
+                help(ARGV0);
+                break;
         }
     }
 
@@ -114,11 +126,13 @@
             ErrorExit(SETGID_ERROR, ARGV0, group);
 
     /* Going on chroot */
-    if(Privsep_Chroot(dir) < 0)
-                ErrorExit(CHROOT_ERROR,ARGV0,dir);
-
-
-    nowChroot();
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+		    ErrorExit(CHROOT_ERROR,ARGV0,dir);
+	    nowChroot();
+    } else {
+	    chdir(dir);
+    }
 
 
     /* Starting the signal manipulation */
--- a/src/shared/help.c
+++ b/src/shared/help.c
@@ -35,7 +35,9 @@
     print_out("    -u <user>   Run as 'user'");
     print_out("    -g <group>  Run as 'group'");
     print_out("    -c <config> Read the 'config' file");
-    print_out("    -D <dir>    Chroot to 'dir'");
+    print_out("    -D <dir>    Chroot or change working directory to 'dir'");
+    print_out("    -N          Do not chroot");
+    print_out("    -C          Chroot the program (default behaviour)");
     print_out(" ");
     exit(1);
 }
--- a/src/util/agent_control.c
+++ b/src/util/agent_control.c
@@ -35,6 +35,8 @@
     printf("\t-f <ar>     Used with -b, specifies which response to run.\n");
     printf("\t-L          List available active responses.\n");
     printf("\t-s          Changes the output to CSV (comma delimited).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -55,6 +57,7 @@
     int c = 0, restart_syscheck = 0, restart_all_agents = 0, list_agents = 0;
     int info_agent = 0, agt_id = 0, active_only = 0, csv_output = 0; 
     int list_responses = 0, end_time = 0, restart_agent = 0;
+    int do_chroot = 1;
 
     char shost[512];
     
@@ -73,7 +76,7 @@
     }
 
 
-    while((c = getopt(argc, argv, "VehdlLcsaru:i:b:f:R:")) != -1)
+    while((c = getopt(argc, argv, "VehdlLcsaru:i:b:f:R:NC:")) != -1)
     {
         switch(c){
             case 'V':
@@ -140,6 +143,12 @@
             case 'a':
                 restart_all_agents = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
@@ -165,14 +174,16 @@
     
     
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
-
-
-    /* Inside chroot now */
-    nowChroot();
  
 
     /* Setting the user */
--- a/src/util/clear_stats.c
+++ b/src/util/clear_stats.c
@@ -28,6 +28,8 @@
     printf("\t-a       Clear all the stats (averages).\n");
     printf("\t-d       Clear the daily averages.\n");
     printf("\t-w       Clear the weekly averages.\n\n");
+    printf("\t-N       Do not chroot.\n");
+    printf("\t-C       Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -43,6 +45,8 @@
     char *user = USER;
     int gid;
     int uid;
+    int c;
+    int do_chroot = 1;
     
 
     /* Setting the name */
@@ -50,11 +54,42 @@
         
     
     /* user arguments */
-    if(argc != 2)
+
+    while((c = getopt(argc, argv, "hadwNC")) != -1)
     {
-        helpmsg();
+	    switch(c){
+	       case 'h':
+		       helpmsg();
+		       break;
+	       case 'a':
+		       clear_daily = 1;
+		       clear_weekly = 1;
+		       break;
+	       case 'd':
+		       clear_daily = 1;
+		       break;
+	       case 'w':
+		       clear_weekly = 1;
+		       break;
+	       case 'N':
+		       do_chroot = 0;
+		       break;
+	       case 'C':
+		       do_chroot = 1;
+		       break;
+	       default:
+		       printf("\n** Invalid option '%s'.\n", argv[1]);
+		       helpmsg();
+		       break;
+	    }
     }
-    
+
+    if(! clear_weekly && ! clear_daily)
+    {
+	    /* We did not get any valid a, d or w option */
+	    helpmsg();
+    }
+
     /* Getting the group name */
     gid = Privsep_GetGroup(group);
     uid = Privsep_GetUser(user);
@@ -72,14 +107,16 @@
     
     
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
-
-
-    /* Inside chroot now */
-    nowChroot();
  
 
     /* Setting the user */
@@ -88,30 +125,6 @@
         ErrorExit(SETUID_ERROR, ARGV0, user);
     }
   
-    /* User options */
-    if(strcmp(argv[1], "-h") == 0)
-    {
-        helpmsg();
-    }
-    else if(strcmp(argv[1], "-a") == 0)
-    {
-        clear_daily = 1;
-        clear_weekly = 1;
-    }
-    else if(strcmp(argv[1], "-d") == 0)
-    {
-        clear_daily = 1;
-    }
-    else if(strcmp(argv[1], "-w") == 0)
-    {
-        clear_weekly = 1;
-    }
-    else
-    {
-        printf("\n** Invalid option '%s'.\n", argv[1]);
-        helpmsg();
-    }
-
 
     /* Clear daily files */
     if(clear_daily)
--- a/src/util/list_agents.c
+++ b/src/util/list_agents.c
@@ -26,6 +26,8 @@
     printf("\t-a    List all agents.\n");
     printf("\t-c    List the connected (active) agents.\n");
     printf("\t-n    List the not connected (active) agents.\n");
+    printf("\t-N    Do not chroot.\n");
+    printf("\t-C    Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -42,6 +44,8 @@
     int gid;
     int uid;
     int flag;
+    int c;
+    int do_chroot = 1;
     
 
     /* Setting the name */
@@ -53,6 +57,36 @@
     {
         helpmsg();
     }
+    /* User options */
+    while((c = getopt(argc, argv, "hacnNC")) != -1)
+    {
+	    switch(c){
+		    case 'h':
+			    helpmsg();
+			    break;
+		    case 'a':
+			    flag = GA_ALL;
+			    msg = "is available.";
+			    break;
+		    case 'c':
+			    flag = GA_ACTIVE;
+			    msg = "is active.";
+			    break;
+		    case 'n':
+			    flag = GA_NOTACTIVE;
+			    msg = "is not active.";
+			    break;
+		    case 'N':
+			    do_chroot = 0;
+			    break;
+		    case 'C':
+			    do_chroot = 1;
+			    break;
+		    default:
+			    helpmsg;
+	    }
+    }
+
     
     /* Getting the group name */
     gid = Privsep_GetGroup(group);
@@ -71,14 +105,16 @@
     
     
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
-
-
-    /* Inside chroot now */
-    nowChroot();
  
 
     /* Setting the user */
@@ -87,32 +123,6 @@
         ErrorExit(SETUID_ERROR, ARGV0, user);
     }
   
-    /* User options */
-    if(strcmp(argv[1], "-h") == 0)
-    {
-        helpmsg();
-    }
-    else if(strcmp(argv[1], "-a") == 0)
-    {
-        flag = GA_ALL;
-        msg = "is available.";
-    }
-    else if(strcmp(argv[1], "-c") == 0)
-    {
-        flag = GA_ACTIVE;
-        msg = "is active.";
-    }
-    else if(strcmp(argv[1], "-n") == 0)
-    {
-        flag = GA_NOTACTIVE;
-        msg = "is not active.";
-    }
-    else
-    {
-        printf("\n** Invalid option '%s'.\n", argv[1]);
-        helpmsg();
-    }
-
 
     agent_list = get_agents(flag);
     if(agent_list)
--- a/src/util/rootcheck_control.c
+++ b/src/util/rootcheck_control.c
@@ -35,6 +35,8 @@
     printf("\t-q          Used with -i, prints all the outstanding issues.\n");
     printf("\t-L          Used with -i, prints the last scan.\n");
     printf("\t-s          Changes the output to CSV (comma delimited).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -49,6 +51,7 @@
 
     int gid = 0;
     int uid = 0;
+    int do_chroot = 1;
     int c = 0, info_agent = 0, update_rootcheck = 0,
                list_agents = 0, show_last = 0,
                resolved_only = 0;
@@ -69,7 +72,7 @@
     }
 
 
-    while((c = getopt(argc, argv, "VhqrDdLlcsu:i:")) != -1)
+    while((c = getopt(argc, argv, "VhqrDdLlcsu:i:NC:")) != -1)
     {
         switch(c){
             case 'V':
@@ -117,6 +120,12 @@
                 agent_id = optarg;
                 update_rootcheck = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
@@ -142,14 +151,16 @@
     
     
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
-
-
-    /* Inside chroot now */
-    nowChroot();
  
 
     /* Setting the user */
--- a/src/util/syscheck_control.c
+++ b/src/util/syscheck_control.c
@@ -37,6 +37,8 @@
     printf("\t-z          Used with the -f, zeroes the auto-ignore counter.\n");
     printf("\t-d          Used with the -f, ignores that file.\n");
     printf("\t-s          Changes the output to CSV (comma delimited).\n");
+    printf("\t-N          Do not chroot.\n");
+    printf("\t-C          Chroot the program (default behaviour).\n");
     exit(1);
 }
 
@@ -52,6 +54,7 @@
 
     int gid = 0;
     int uid = 0;
+    int do_chroot = 1;
     int c = 0, info_agent = 0, update_syscheck = 0,
                list_agents = 0, zero_counter = 0,
                registry_only = 0;
@@ -72,7 +75,7 @@
     }
 
 
-    while((c = getopt(argc, argv, "VhzrDdlcsu:i:f:")) != -1)
+    while((c = getopt(argc, argv, "VhzrDdlcsu:i:f:NC:")) != -1)
     {
         switch(c){
             case 'V':
@@ -127,6 +130,12 @@
                 agent_id = optarg;
                 update_syscheck = 1;
                 break;
+            case 'N':
+                do_chroot = 0;
+                break;
+            case 'C':
+                do_chroot = 1;
+                break;
             default:
                 helpmsg();
                 break;
@@ -152,14 +161,16 @@
     
     
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
-
-
-    /* Inside chroot now */
-    nowChroot();
  
 
     /* Setting the user */
--- a/src/util/syscheck_update.c
+++ b/src/util/syscheck_update.c
@@ -27,7 +27,10 @@
     printf("\t-l       List available agents.\n");
     printf("\t-a       Update (clear) syscheck database for all agents.\n");
     printf("\t-u <id>  Update (clear) syscheck database for a specific agent.\n");
-    printf("\t-u local Update (clear) syscheck database locally.\n\n");
+    printf("\t-u local Update (clear) syscheck database locally.\n");
+    printf("\t-N       Do not chroot.\n");
+    printf("\t-C       Chroot the program (default behaviour).\n");
+    printlnf();
     exit(1);
 }
 
@@ -39,6 +42,10 @@
     char *user = USER;
     int gid;
     int uid;
+    int c;
+    int do_chroot = 1;
+    int list_agents, update_agents = 0;
+    char *agent_id = NULL;
     
 
     /* Setting the name */
@@ -50,6 +57,33 @@
     {
         helpmsg();
     }
+    while((c = getopt(argc, argv, "hlau:NC:")) != -1)
+    {
+	    switch(c){
+	          case 'h':
+			  helpmsg();
+			  break;
+	          case 'l':
+			  list_agents = 1;
+			  break;
+	          case 'u':
+			  if(!optarg)
+			  {
+				  merror("%s: -u needs an argument",ARGV0);
+				  helpmsg();
+			  }
+			  agent_id = optarg;
+			  update_agents = 1;
+			  break;
+	          case 'a':
+			  agent_id = strdup("all");
+			  update_agents = 1;
+			  break;
+		  default:
+			  helpmsg();
+	    }
+    }
+
     
     /* Getting the group name */
     gid = Privsep_GetGroup(group);
@@ -68,14 +102,16 @@
     
     
     /* Chrooting to the default directory */
-    if(Privsep_Chroot(dir) < 0)
-    {
-        ErrorExit(CHROOT_ERROR, ARGV0, dir);
+    if (do_chroot) {
+	    if(Privsep_Chroot(dir) < 0)
+	    {
+		    ErrorExit(CHROOT_ERROR, ARGV0, dir);
+	    }
+	    /* Inside chroot now */
+	    nowChroot();
+    } else {
+	    chdir(dir);
     }
-
-
-    /* Inside chroot now */
-    nowChroot();
  
 
     /* Setting the user */
@@ -85,11 +121,7 @@
     }
   
     /* User options */
-    if(strcmp(argv[1], "-h") == 0)
-    {
-        helpmsg();
-    }
-    else if(strcmp(argv[1], "-l") == 0)
+    if( list_agents )
     {
         printf("\nOSSEC HIDS %s: Updates the integrity check database.", 
                                  ARGV0);
@@ -97,108 +129,98 @@
         printf("\n");
         exit(0);
     }
-    else if(strcmp(argv[1], "-u") == 0)
+    else if( update_agents )
     {
-        if(argc != 3)
-        {
-            printf("\n** Option -u requires an extra argument\n");
-            helpmsg();
-        }
-    }
-    else if(strcmp(argv[1], "-a") == 0)
-    {
-        DIR *sys_dir;
-        struct dirent *entry;
-
-        sys_dir = opendir(SYSCHECK_DIR);
-        if(!sys_dir)
-        {
-            ErrorExit("%s: Unable to open: '%s'", ARGV0, SYSCHECK_DIR);
-        }
-
-        while((entry = readdir(sys_dir)) != NULL)
-        {
-            FILE *fp;
-            char full_path[OS_MAXSTR +1];
-
-            /* Do not even attempt to delete . and .. :) */
-            if((strcmp(entry->d_name,".") == 0)||
-               (strcmp(entry->d_name,"..") == 0))
-            {
-                continue;
-            }
-
-            snprintf(full_path, OS_MAXSTR,"%s/%s", SYSCHECK_DIR, entry->d_name);
-            
-            fp = fopen(full_path, "w");
-            if(fp)
-            {
-                fclose(fp);
-            }
-            if(entry->d_name[0] == '.')
-            {
-                unlink(full_path);
-            }
-        }
+	    if ( strcmp(agent_id, "all") == 0 )
+	    {
+		    DIR *sys_dir;
+		    struct dirent *entry;
+
+		    sys_dir = opendir(SYSCHECK_DIR);
+		    if(!sys_dir)
+		    {
+			    ErrorExit("%s: Unable to open: '%s'", ARGV0, SYSCHECK_DIR);
+		    }
+
+		    while((entry = readdir(sys_dir)) != NULL)
+		    {
+			    FILE *fp;
+			    char full_path[OS_MAXSTR +1];
+
+			    /* Do not even attempt to delete . and .. :) */
+			    if((strcmp(entry->d_name,".") == 0)||
+					    (strcmp(entry->d_name,"..") == 0))
+			    {
+				    continue;
+			    }
+
+			    snprintf(full_path, OS_MAXSTR,"%s/%s", SYSCHECK_DIR, entry->d_name);
+
+			    fp = fopen(full_path, "w");
+			    if(fp)
+			    {
+				    fclose(fp);
+			    }
+			    if(entry->d_name[0] == '.')
+			    {
+				    unlink(full_path);
+			    }
+		    }
+
+		    closedir(sys_dir);
+		    printf("\n** Integrity check database updated.\n\n");
+		    exit(0);
+	    }
+	    else if(strcmp(agent_id,"local") == 0)
+	    {
+		    /* local */
+		    char final_dir[1024];
+		    FILE *fp;
+		    snprintf(final_dir, 1020, "/%s/syscheck", SYSCHECK_DIR);
+
+		    fp = fopen(final_dir, "w");
+		    if(fp)
+		    {
+			    fclose(fp);
+		    }
+		    unlink(final_dir);
+
+
+		    /* Deleting cpt file */
+		    snprintf(final_dir, 1020, "/%s/.syscheck.cpt", SYSCHECK_DIR);
+
+		    fp = fopen(final_dir, "w");
+		    if(fp)
+		    {
+			    fclose(fp);
+		    }
+		    /* unlink(final_dir); */
+	    }
+	    /* external agents */
+	    else
+	    {
+		    int i;
+		    keystore keys;
+
+		    OS_ReadKeys(&keys);
+
+		    i = OS_IsAllowedID(&keys, argv[2]);
+		    if(i < 0)
+		    {
+			    printf("\n** Invalid agent id '%s'.\n", argv[2]);
+			    helpmsg();
+		    }
+
+		    /* Deleting syscheck */
+		    delete_syscheck(keys.keyentries[i]->name,keys.keyentries[i]->ip->ip,0);
+	    }
 
-        closedir(sys_dir);
-        printf("\n** Integrity check database updated.\n\n"); 
-        exit(0);
+	    printf("\n** Integrity check database updated.\n\n");
+	    exit(0);
     }
-    else
-    {
-        printf("\n** Invalid option '%s'.\n", argv[1]);
-        helpmsg();
-    }
-
-    
-    /* local */
-    if(strcmp(argv[2],"local") == 0)
-    {
-        char final_dir[1024];
-        FILE *fp;
-        snprintf(final_dir, 1020, "/%s/syscheck", SYSCHECK_DIR);
-        
-        fp = fopen(final_dir, "w");
-        if(fp)
-        {
-            fclose(fp);
-        }
-        unlink(final_dir);
-
 
-        /* Deleting cpt file */
-        snprintf(final_dir, 1020, "/%s/.syscheck.cpt", SYSCHECK_DIR);
-        
-        fp = fopen(final_dir, "w");
-        if(fp)
-        {
-            fclose(fp);
-        }
-        /* unlink(final_dir); */
-    }
-
-    /* external agents */
-    else
-    {
-        int i;
-        keystore keys;
-
-        OS_ReadKeys(&keys);
-
-        i = OS_IsAllowedID(&keys, argv[2]);
-        if(i < 0)
-        {
-            printf("\n** Invalid agent id '%s'.\n", argv[2]);
-            helpmsg();
-        }
-        
-        /* Deleting syscheck */
-        delete_syscheck(keys.keyentries[i]->name,keys.keyentries[i]->ip->ip,0);
-    }
-   
-    printf("\n** Integrity check database updated.\n\n"); 
-    return(0);
+    printf("\n** No work to do (wrong options?).\n\n");
+    exit(0);
 }
 
 
